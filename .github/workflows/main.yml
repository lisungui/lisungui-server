name: CI/CD Pipeline AWS EC2

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Set up Gradle
        uses: gradle/gradle-build-action@v2

      - name: Create .env file for Firestore Credentials
        run: echo "FIRESTORE_APPLICATION_CREDENTIALS=${{ secrets.FIRESTORE_APPLICATION_CREDENTIALS }}" > .env

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        env:
          FIRESTORE_APPLICATION_CREDENTIALS: ${{ secrets.FIRESTORE_APPLICATION_CREDENTIALS }}
        run: ./gradlew build

  deploy:
    name: Deploy to AWS EC2
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v2

      - name: Install Java 17
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Set up Gradle
        uses: gradle/gradle-build-action@v2

      - name: Create .env file for Firestore Credentials
        run: echo "FIRESTORE_APPLICATION_CREDENTIALS=${{ secrets.FIRESTORE_APPLICATION_CREDENTIALS }}" > .env

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Write SSH key
        run: |
          echo "${{ secrets.SSH_KEY }}" > lisungui_server_key.pem
          chmod 600 lisungui_server_key.pem

      - name: Ensure target directory exists
        run: ssh -o StrictHostKeyChecking=no -i lisungui_server_key.pem ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "mkdir -p /home/${{ secrets.SSH_USER }}/app"

      - name: Copy files to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i lisungui_server_key.pem ./build/libs/*.jar ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/home/${{ secrets.SSH_USER }}/app/

      - name: Create Firestore credentials JSON file on the remote server
        run: |
          ssh -o StrictHostKeyChecking=no -i lisungui_server_key.pem ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            echo '${{ secrets.FIRESTORE_APPLICATION_CREDENTIALS }}' > /home/${{ secrets.SSH_USER }}/app/accountKey.json
          "
  
      - name: Create .env file on the remote server
        run: |
          ssh -o StrictHostKeyChecking=no -i lisungui_server_key.pem ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            echo 'FIRESTORE_APPLICATION_CREDENTIALS=/home/${{ secrets.SSH_USER }}/app/accountKey.json' > /home/${{ secrets.SSH_USER }}/app/.env
          "

      - name: Deploy to EC2
        env:
          FIRESTORE_APPLICATION_CREDENTIALS: ${{ secrets.FIRESTORE_APPLICATION_CREDENTIALS }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          ssh -o StrictHostKeyChecking=no -i lisungui_server_key.pem ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            cd /home/${{ secrets.SSH_USER }}/app &&
            nohup java -jar *.jar > app.log 2>&1 &
          "

      - name: Wait for the application to start
        run: sleep 10

      - name: Health Check
        run: curl -f http://${{ secrets.SSH_HOST }}:8080/ || exit 1

